using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.IO;
using System.Linq;
using System.Reflection;
using XrmToolBox.Extensibility;
using XrmToolBox.Extensibility.Interfaces;

namespace PCf_Explorer_Sol
{
	// Do not forget to update version number and author (company attribute) in AssemblyInfo.cs class
	// To generate Base64 string for Images below, you can use https://www.base64-image.de/
	//https://github.com/yesadahmed/PCF-Explorer
	[Export(typeof(IXrmToolBoxPlugin)),
		ExportMetadata("Name", "PCF-Explorer"),
		ExportMetadata("Description", "A tool to explore PCF control dependencies (properties, dataset, resources, entities and solution). Works with OAUTH/Certifcate Connection."),
		// Please specify the base64 content of a 32x32 pixels image
		ExportMetadata("SmallImageBase64", "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"),
		// Please specify the base64 content of a 80x80 pixels image
		ExportMetadata("BigImageBase64", ""),
		ExportMetadata("BackgroundColor", "#f0f8ff"),
		ExportMetadata("PrimaryFontColor", "Black"),
		ExportMetadata("SecondaryFontColor", "Gray")]
	public class MyPlugin : PluginBase
	{
		public override IXrmToolBoxPluginControl GetControl()
		{
			return new MyPluginControl();
		}

		/// <summary>
		/// Constructor 
		/// </summary>
		public MyPlugin()
		{
			// If you have external assemblies that you need to load, uncomment the following to 
			// hook into the event that will fire when an Assembly fails to resolve
			// AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(AssemblyResolveEventHandler);
		}

		/// <summary>
		/// Event fired by CLR when an assembly reference fails to load
		/// Assumes that related assemblies will be loaded from a subfolder named the same as the Plugin
		/// For example, a folder named Sample.XrmToolBox.MyPlugin 
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="args"></param>
		/// <returns></returns>
		private Assembly AssemblyResolveEventHandler(object sender, ResolveEventArgs args)
		{
			Assembly loadAssembly = null;
			Assembly currAssembly = Assembly.GetExecutingAssembly();

			// base name of the assembly that failed to resolve
			var argName = args.Name.Substring(0, args.Name.IndexOf(","));

			// check to see if the failing assembly is one that we reference.
			List<AssemblyName> refAssemblies = currAssembly.GetReferencedAssemblies().ToList();
			var refAssembly = refAssemblies.Where(a => a.Name == argName).FirstOrDefault();

			// if the current unresolved assembly is referenced by our plugin, attempt to load
			if (refAssembly != null)
			{
				// load from the path to this plugin assembly, not host executable
				string dir = Path.GetDirectoryName(currAssembly.Location).ToLower();
				string folder = Path.GetFileNameWithoutExtension(currAssembly.Location);
				dir = Path.Combine(dir, folder);

				var assmbPath = Path.Combine(dir, $"{argName}.dll");

				if (File.Exists(assmbPath))
				{
					loadAssembly = Assembly.LoadFrom(assmbPath);
				}
				else
				{
					throw new FileNotFoundException($"Unable to locate dependency: {assmbPath}");
				}
			}

			return loadAssembly;
		}
	}
}